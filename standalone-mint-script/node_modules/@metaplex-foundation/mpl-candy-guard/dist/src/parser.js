"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseData = void 0;
const bn_js_1 = require("bn.js");
const beet = __importStar(require("@metaplex-foundation/beet"));
const log_1 = require("./utils/log");
const generated_1 = require("./generated");
const SolPayment_1 = require("./generated/types/SolPayment");
const TokenPayment_1 = require("./generated/types/TokenPayment");
const EndDate_1 = require("./generated/types/EndDate");
const RedeemedAmount_1 = require("./generated/types/RedeemedAmount");
const AddressGate_1 = require("./generated/types/AddressGate");
const NftGate_1 = require("./generated/types/NftGate");
const NftBurn_1 = require("./generated/types/NftBurn");
const TokenBurn_1 = require("./generated/types/TokenBurn");
const GUARDS_SIZE = {
    botTax: 9,
    solPayment: 40,
    tokenPayment: 72,
    startDate: 8,
    thirdPartySigner: 32,
    tokenGate: 40,
    gatekeeper: 33,
    endDate: 8,
    allowList: 32,
    mintLimit: 3,
    nftPayment: 64,
    redeemedAmount: 8,
    addressGate: 32,
    nftGate: 32,
    nftBurn: 32,
    tokenBurn: 40,
};
const GUARDS_COUNT = 16;
const MAX_LABEL_LENGTH = 6;
function determineGuards(buffer) {
    const enabled = new bn_js_1.BN(beet.u64.read(buffer, 0)).toNumber();
    const guards = [];
    for (let i = 0; i < GUARDS_COUNT; i++) {
        guards.push(!!((1 << i) & enabled));
    }
    const [botTaxEnabled, solPaymentEnabled, tokenPaymentEnabled, startDateEnabled, thirdPartySignerEnabled, tokenGateEnabled, gatekeeperEnabled, endDateEnabled, allowListEnabled, mintLimitEnabled, nftPaymentEnabled, redeemedAmountEnabled, addressGateEnabled, nftGateEnabled, nftBurnEnabled, tokenBurnEnabled,] = guards;
    return {
        botTaxEnabled,
        solPaymentEnabled,
        tokenPaymentEnabled,
        startDateEnabled,
        thirdPartySignerEnabled,
        tokenGateEnabled,
        gatekeeperEnabled,
        endDateEnabled,
        allowListEnabled,
        mintLimitEnabled,
        nftPaymentEnabled,
        redeemedAmountEnabled,
        addressGateEnabled,
        nftGateEnabled,
        nftBurnEnabled,
        tokenBurnEnabled,
    };
}
function parseData(buffer) {
    const { guardSet: defaultSet, offset } = parseGuardSet(buffer);
    const groupsCount = new bn_js_1.BN(beet.u32.read(buffer, offset)).toNumber();
    const groups = [];
    let cursor = beet.u32.byteSize + offset;
    for (let i = 0; i < groupsCount; i++) {
        const label = buffer.subarray(cursor, cursor + MAX_LABEL_LENGTH).toString();
        cursor += MAX_LABEL_LENGTH;
        const { guardSet: guards, offset } = parseGuardSet(buffer.subarray(cursor));
        groups.push({ label, guards });
        cursor += offset;
    }
    return {
        default: defaultSet,
        groups: groups.length === 0 ? null : groups,
    };
}
exports.parseData = parseData;
function parseGuardSet(buffer) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;
    const guards = determineGuards(buffer);
    const { botTaxEnabled, startDateEnabled, solPaymentEnabled, tokenPaymentEnabled, thirdPartySignerEnabled, tokenGateEnabled, gatekeeperEnabled, endDateEnabled, allowListEnabled, mintLimitEnabled, nftPaymentEnabled, redeemedAmountEnabled, addressGateEnabled, nftGateEnabled, nftBurnEnabled, tokenBurnEnabled, } = guards;
    (0, log_1.logDebug)('Guards: %O', guards);
    let cursor = beet.u64.byteSize;
    const data = {};
    if (botTaxEnabled) {
        const [botTax] = generated_1.botTaxBeet.deserialize(buffer, cursor);
        data.botTax = botTax;
        cursor += GUARDS_SIZE.botTax;
    }
    if (solPaymentEnabled) {
        const [solPayment] = SolPayment_1.solPaymentBeet.deserialize(buffer, cursor);
        data.solPayment = solPayment;
        cursor += GUARDS_SIZE.solPayment;
    }
    if (tokenPaymentEnabled) {
        const [tokenPayment] = TokenPayment_1.tokenPaymentBeet.deserialize(buffer, cursor);
        data.tokenPayment = tokenPayment;
        cursor += GUARDS_SIZE.tokenPayment;
    }
    if (startDateEnabled) {
        const [startDate] = generated_1.startDateBeet.deserialize(buffer, cursor);
        data.startDate = startDate;
        cursor += GUARDS_SIZE.startDate;
    }
    if (thirdPartySignerEnabled) {
        const [thirdPartySigner] = generated_1.thirdPartySignerBeet.deserialize(buffer, cursor);
        data.thirdPartySigner = thirdPartySigner;
        cursor += GUARDS_SIZE.thirdPartySigner;
    }
    if (tokenGateEnabled) {
        const [tokenGate] = generated_1.tokenGateBeet.deserialize(buffer, cursor);
        data.tokenGate = tokenGate;
        cursor += GUARDS_SIZE.tokenGate;
    }
    if (gatekeeperEnabled) {
        const [gatekeeper] = generated_1.gatekeeperBeet.deserialize(buffer, cursor);
        data.gatekeeper = gatekeeper;
        cursor += GUARDS_SIZE.gatekeeper;
    }
    if (endDateEnabled) {
        const [endDate] = EndDate_1.endDateBeet.deserialize(buffer, cursor);
        data.endDate = endDate;
        cursor += GUARDS_SIZE.endDate;
    }
    if (allowListEnabled) {
        const [allowList] = generated_1.allowListBeet.deserialize(buffer, cursor);
        data.allowList = allowList;
        cursor += GUARDS_SIZE.allowList;
    }
    if (mintLimitEnabled) {
        const [mintLimit] = generated_1.mintLimitBeet.deserialize(buffer, cursor);
        data.mintLimit = mintLimit;
        cursor += GUARDS_SIZE.mintLimit;
    }
    if (nftPaymentEnabled) {
        const [nftPayment] = generated_1.nftPaymentBeet.deserialize(buffer, cursor);
        data.nftPayment = nftPayment;
        cursor += GUARDS_SIZE.nftPayment;
    }
    if (redeemedAmountEnabled) {
        const [redeemedAmount] = RedeemedAmount_1.redeemedAmountBeet.deserialize(buffer, cursor);
        data.redeemedAmount = redeemedAmount;
        cursor += GUARDS_SIZE.redeemedAmount;
    }
    if (addressGateEnabled) {
        const [addressGate] = AddressGate_1.addressGateBeet.deserialize(buffer, cursor);
        data.addressGate = addressGate;
        cursor += GUARDS_SIZE.addressGate;
    }
    if (nftGateEnabled) {
        const [nftGate] = NftGate_1.nftGateBeet.deserialize(buffer, cursor);
        data.nftGate = nftGate;
        cursor += GUARDS_SIZE.nftGate;
    }
    if (nftBurnEnabled) {
        const [nftBurn] = NftBurn_1.nftBurnBeet.deserialize(buffer, cursor);
        data.nftBurn = nftBurn;
        cursor += GUARDS_SIZE.nftBurn;
    }
    if (tokenBurnEnabled) {
        const [tokenBurn] = TokenBurn_1.tokenBurnBeet.deserialize(buffer, cursor);
        data.tokenBurn = tokenBurn;
        cursor += GUARDS_SIZE.tokenBurn;
    }
    return {
        guardSet: {
            botTax: (_a = data.botTax) !== null && _a !== void 0 ? _a : null,
            solPayment: (_b = data.solPayment) !== null && _b !== void 0 ? _b : null,
            tokenPayment: (_c = data.tokenPayment) !== null && _c !== void 0 ? _c : null,
            startDate: (_d = data.startDate) !== null && _d !== void 0 ? _d : null,
            thirdPartySigner: (_e = data.thirdPartySigner) !== null && _e !== void 0 ? _e : null,
            tokenGate: (_f = data.tokenGate) !== null && _f !== void 0 ? _f : null,
            gatekeeper: (_g = data.gateKeeper) !== null && _g !== void 0 ? _g : null,
            endDate: (_h = data.endDate) !== null && _h !== void 0 ? _h : null,
            allowList: (_j = data.allowList) !== null && _j !== void 0 ? _j : null,
            mintLimit: (_k = data.mintLimit) !== null && _k !== void 0 ? _k : null,
            nftPayment: (_l = data.nftPayment) !== null && _l !== void 0 ? _l : null,
            redeemedAmount: (_m = data.redeemedAmount) !== null && _m !== void 0 ? _m : null,
            addressGate: (_o = data.addressGate) !== null && _o !== void 0 ? _o : null,
            nftGate: (_p = data.nftGate) !== null && _p !== void 0 ? _p : null,
            nftBurn: (_q = data.nftBurn) !== null && _q !== void 0 ? _q : null,
            tokenBurn: (_r = data.tokenBurn) !== null && _r !== void 0 ? _r : null,
        },
        offset: cursor,
    };
}
//# sourceMappingURL=parser.js.map