/// <reference types="node" />
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
export declare type AllowListProofArgs = {
    timestamp: beet.bignum;
};
export declare const allowListProofDiscriminator: number[];
export declare class AllowListProof implements AllowListProofArgs {
    readonly timestamp: beet.bignum;
    private constructor();
    static fromArgs(args: AllowListProofArgs): AllowListProof;
    static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset?: number): [AllowListProof, number];
    static fromAccountAddress(connection: web3.Connection, address: web3.PublicKey): Promise<AllowListProof>;
    static gpaBuilder(programId?: web3.PublicKey): beetSolana.GpaBuilder<{
        timestamp: any;
        accountDiscriminator: any;
    }>;
    static deserialize(buf: Buffer, offset?: number): [AllowListProof, number];
    serialize(): [Buffer, number];
    static get byteSize(): number;
    static getMinimumBalanceForRentExemption(connection: web3.Connection, commitment?: web3.Commitment): Promise<number>;
    static hasCorrectByteSize(buf: Buffer, offset?: number): boolean;
    pretty(): {
        timestamp: number | {
            toNumber: () => number;
        };
    };
}
export declare const allowListProofBeet: beet.BeetStruct<AllowListProof, AllowListProofArgs & {
    accountDiscriminator: number[];
}>;
