{"version":3,"file":"findBidsByPublicKeyField.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findBidsByPublicKeyField.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { BidReceiptGpaBuilder } from '../gpaBuilders';\nimport { AuctionHouse, Bid, LazyBid, toLazyBid } from '../models';\nimport { toBidReceiptAccount } from '../accounts';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { UnreachableCaseError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindBidsByPublicKeyOperation' as const;\n\n/**\n * Finds multiple Bids by specific criteria.\n *\n * ```ts\n * // Find bids by buyer.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBidsBy({ auctionHouse, type: 'buyer', publicKey: buyer };\n *\n * // Find bids by metadata.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBidsBy({ auctionHouse, type: 'metadata', publicKey: metadata };\n *\n * // Find bids by mint.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBidsBy({ auctionHouse, type: 'mint', publicKey: mint };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findBidsByPublicKeyFieldOperation =\n  useOperation<FindBidsByPublicKeyFieldOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindBidsByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindBidsByPublicKeyFieldInput,\n  FindBidsByPublicKeyFieldOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindBidsByPublicKeyFieldInput = {\n  /** A type of criteria to use in search. */\n  type: 'buyer' | 'metadata' | 'mint';\n\n  /** A model of the Auction House related to these bids. */\n  auctionHouse: AuctionHouse;\n\n  /** The address to search for. */\n  publicKey: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindBidsByPublicKeyFieldOutput = (LazyBid | Bid)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findBidsByPublicKeyFieldOperationHandler: OperationHandler<FindBidsByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindBidsByPublicKeyFieldOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindBidsByPublicKeyFieldOutput> => {\n      const { programs, commitment } = scope;\n      const { auctionHouse, type, publicKey } = operation.input;\n\n      const auctionHouseProgram = metaplex.programs().getAuctionHouse();\n      let bidQuery = new BidReceiptGpaBuilder(\n        metaplex,\n        auctionHouseProgram.address\n      )\n        .mergeConfig({ commitment })\n        .whereAuctionHouse(auctionHouse.address);\n\n      switch (type) {\n        case 'buyer':\n          bidQuery = bidQuery.whereBuyer(publicKey);\n          break;\n        case 'metadata':\n          bidQuery = bidQuery.whereMetadata(publicKey);\n          break;\n        case 'mint':\n          bidQuery = bidQuery.whereMetadata(\n            metaplex.nfts().pdas().metadata({ mint: publicKey, programs })\n          );\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n      scope.throwIfCanceled();\n\n      return bidQuery.getAndMap((account) =>\n        toLazyBid(toBidReceiptAccount(account), auctionHouse)\n      );\n    },\n  };\n"],"names":["Key","findBidsByPublicKeyFieldOperation","useOperation","findBidsByPublicKeyFieldOperationHandler","handle","operation","metaplex","scope","programs","commitment","auctionHouse","type","publicKey","input","auctionHouseProgram","getAuctionHouse","bidQuery","BidReceiptGpaBuilder","address","mergeConfig","whereAuctionHouse","whereBuyer","whereMetadata","nfts","pdas","metadata","mint","UnreachableCaseError","throwIfCanceled","getAndMap","account","toLazyBid","toBidReceiptAccount"],"mappings":";;;;;;AAcA;AACA;;AAEA,MAAMA,GAAG,GAAG,8BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,iCAAiC,GAC5CC,YAAY,CAAoCF,GAApC,EADP;AAGP;AACA;AACA;AACA;;AA4BA;AACA;AACA;AACA;AACO,MAAMG,wCAA6F,GACxG;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIsC;IAC5C,MAAM;MAAEC,QAAF;AAAYC,MAAAA,UAAAA;AAAZ,KAAA,GAA2BF,KAAjC,CAAA;IACA,MAAM;MAAEG,YAAF;MAAgBC,IAAhB;AAAsBC,MAAAA,SAAAA;KAAcP,GAAAA,SAAS,CAACQ,KAApD,CAAA;AAEA,IAAA,MAAMC,mBAAmB,GAAGR,QAAQ,CAACE,QAAT,EAAA,CAAoBO,eAApB,EAA5B,CAAA;AACA,IAAA,IAAIC,QAAQ,GAAG,IAAIC,oBAAJ,CACbX,QADa,EAEbQ,mBAAmB,CAACI,OAFP,CAIZC,CAAAA,WAJY,CAIA;AAAEV,MAAAA,UAAAA;AAAF,KAJA,EAKZW,iBALY,CAKMV,YAAY,CAACQ,OALnB,CAAf,CAAA;;AAOA,IAAA,QAAQP,IAAR;AACE,MAAA,KAAK,OAAL;AACEK,QAAAA,QAAQ,GAAGA,QAAQ,CAACK,UAAT,CAAoBT,SAApB,CAAX,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,UAAL;AACEI,QAAAA,QAAQ,GAAGA,QAAQ,CAACM,aAAT,CAAuBV,SAAvB,CAAX,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,MAAL;AACEI,QAAAA,QAAQ,GAAGA,QAAQ,CAACM,aAAT,CACThB,QAAQ,CAACiB,IAAT,EAAgBC,CAAAA,IAAhB,EAAuBC,CAAAA,QAAvB,CAAgC;AAAEC,UAAAA,IAAI,EAAEd,SAAR;AAAmBJ,UAAAA,QAAAA;AAAnB,SAAhC,CADS,CAAX,CAAA;AAGA,QAAA,MAAA;;AACF,MAAA;AACE,QAAA,MAAM,IAAImB,oBAAJ,CAAyBhB,IAAzB,CAAN,CAAA;AAbJ,KAAA;;AAeAJ,IAAAA,KAAK,CAACqB,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOZ,QAAQ,CAACa,SAAT,CAAoBC,OAAD,IACxBC,SAAS,CAACC,mBAAmB,CAACF,OAAD,CAApB,EAA+BpB,YAA/B,CADJ,CAAP,CAAA;AAGD,GAAA;AArCH;;;;"}