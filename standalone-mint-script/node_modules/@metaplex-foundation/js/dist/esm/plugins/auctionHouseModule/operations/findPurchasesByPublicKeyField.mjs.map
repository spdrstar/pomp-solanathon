{"version":3,"file":"findPurchasesByPublicKeyField.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findPurchasesByPublicKeyField.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toPurchaseReceiptAccount } from '../accounts';\nimport { PurchaseReceiptGpaBuilder } from '../gpaBuilders';\nimport {\n  AuctionHouse,\n  LazyPurchase,\n  Purchase,\n  toLazyPurchase,\n} from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { UnreachableCaseError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchasesByPublicKeyOperation' as const;\n\n/**\n * Finds multiple Purchases by specific criteria.\n *\n * ```ts\n * // Find purchases by seller.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchasesBy({ auctionHouse, type: 'seller', publicKey: seller };\n *\n * // Find purchases by buyer.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchasesBy({ auctionHouse, type: 'buyer', publicKey: buyer };\n *\n * // Find purchases by metadata.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchasesBy({ auctionHouse, type: 'metadata', publicKey: metadata };\n *\n * // Find purchases by mint.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchasesBy({ auctionHouse, type: 'mint', publicKey: mint };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findPurchasesByPublicKeyFieldOperation =\n  useOperation<FindPurchasesByPublicKeyFieldOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindPurchasesByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindPurchasesByPublicKeyFieldInput,\n  FindPurchasesByPublicKeyFieldOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindPurchasesByPublicKeyFieldInput = {\n  /** A type of criteria to use in search. */\n  type: 'buyer' | 'seller' | 'metadata' | 'mint';\n\n  /** A model of the Auction House related to these purchases. */\n  auctionHouse: AuctionHouse;\n\n  /** The address to search for. */\n  publicKey: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindPurchasesByPublicKeyFieldOutput = (Purchase | LazyPurchase)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findPurchasesByPublicKeyFieldOperationHandler: OperationHandler<FindPurchasesByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindPurchasesByPublicKeyFieldOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindPurchasesByPublicKeyFieldOutput> => {\n      const { programs, commitment } = scope;\n      const { auctionHouse, type, publicKey } = operation.input;\n      const auctionHouseProgram = metaplex.programs().getAuctionHouse();\n      let purchaseQuery = new PurchaseReceiptGpaBuilder(\n        metaplex,\n        auctionHouseProgram.address\n      )\n        .mergeConfig({ commitment })\n        .whereAuctionHouse(auctionHouse.address);\n\n      switch (type) {\n        case 'buyer':\n          purchaseQuery = purchaseQuery.whereBuyer(publicKey);\n          break;\n        case 'seller':\n          purchaseQuery = purchaseQuery.whereSeller(publicKey);\n          break;\n        case 'metadata':\n          purchaseQuery = purchaseQuery.whereMetadata(publicKey);\n          break;\n        case 'mint':\n          purchaseQuery = purchaseQuery.whereMetadata(\n            metaplex.nfts().pdas().metadata({ mint: publicKey, programs })\n          );\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n      scope.throwIfCanceled();\n\n      return purchaseQuery.getAndMap((account) =>\n        toLazyPurchase(toPurchaseReceiptAccount(account), auctionHouse)\n      );\n    },\n  };\n"],"names":["Key","findPurchasesByPublicKeyFieldOperation","useOperation","findPurchasesByPublicKeyFieldOperationHandler","handle","operation","metaplex","scope","programs","commitment","auctionHouse","type","publicKey","input","auctionHouseProgram","getAuctionHouse","purchaseQuery","PurchaseReceiptGpaBuilder","address","mergeConfig","whereAuctionHouse","whereBuyer","whereSeller","whereMetadata","nfts","pdas","metadata","mint","UnreachableCaseError","throwIfCanceled","getAndMap","account","toLazyPurchase","toPurchaseReceiptAccount"],"mappings":";;;;;;AAmBA;AACA;;AAEA,MAAMA,GAAG,GAAG,mCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,sCAAsC,GACjDC,YAAY,CAAyCF,GAAzC,EADP;AAGP;AACA;AACA;AACA;;AA4BA;AACA;AACA;AACA;AACO,MAAMG,6CAAuG,GAClH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI2C;IACjD,MAAM;MAAEC,QAAF;AAAYC,MAAAA,UAAAA;AAAZ,KAAA,GAA2BF,KAAjC,CAAA;IACA,MAAM;MAAEG,YAAF;MAAgBC,IAAhB;AAAsBC,MAAAA,SAAAA;KAAcP,GAAAA,SAAS,CAACQ,KAApD,CAAA;AACA,IAAA,MAAMC,mBAAmB,GAAGR,QAAQ,CAACE,QAAT,EAAA,CAAoBO,eAApB,EAA5B,CAAA;AACA,IAAA,IAAIC,aAAa,GAAG,IAAIC,yBAAJ,CAClBX,QADkB,EAElBQ,mBAAmB,CAACI,OAFF,CAIjBC,CAAAA,WAJiB,CAIL;AAAEV,MAAAA,UAAAA;AAAF,KAJK,EAKjBW,iBALiB,CAKCV,YAAY,CAACQ,OALd,CAApB,CAAA;;AAOA,IAAA,QAAQP,IAAR;AACE,MAAA,KAAK,OAAL;AACEK,QAAAA,aAAa,GAAGA,aAAa,CAACK,UAAd,CAAyBT,SAAzB,CAAhB,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,QAAL;AACEI,QAAAA,aAAa,GAAGA,aAAa,CAACM,WAAd,CAA0BV,SAA1B,CAAhB,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,UAAL;AACEI,QAAAA,aAAa,GAAGA,aAAa,CAACO,aAAd,CAA4BX,SAA5B,CAAhB,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,MAAL;AACEI,QAAAA,aAAa,GAAGA,aAAa,CAACO,aAAd,CACdjB,QAAQ,CAACkB,IAAT,EAAgBC,CAAAA,IAAhB,EAAuBC,CAAAA,QAAvB,CAAgC;AAAEC,UAAAA,IAAI,EAAEf,SAAR;AAAmBJ,UAAAA,QAAAA;AAAnB,SAAhC,CADc,CAAhB,CAAA;AAGA,QAAA,MAAA;;AACF,MAAA;AACE,QAAA,MAAM,IAAIoB,oBAAJ,CAAyBjB,IAAzB,CAAN,CAAA;AAhBJ,KAAA;;AAkBAJ,IAAAA,KAAK,CAACsB,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOb,aAAa,CAACc,SAAd,CAAyBC,OAAD,IAC7BC,cAAc,CAACC,wBAAwB,CAACF,OAAD,CAAzB,EAAoCrB,YAApC,CADT,CAAP,CAAA;AAGD,GAAA;AAvCH;;;;"}