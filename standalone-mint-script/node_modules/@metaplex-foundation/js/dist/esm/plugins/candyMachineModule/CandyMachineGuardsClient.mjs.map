{"version":3,"file":"CandyMachineGuardsClient.mjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachineGuardsClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as beet from '@metaplex-foundation/beet';\nimport { AccountMeta } from '@solana/web3.js';\nimport { CANDY_GUARD_LABEL_SIZE } from './constants';\nimport {\n  GuardGroupRequiredError,\n  GuardNotEnabledError,\n  GuardRouteNotSupportedError,\n  SelectedGuardGroupDoesNotExistError,\n  UnregisteredCandyGuardError,\n} from './errors';\nimport {\n  CandyGuardManifest,\n  CandyGuardsMintSettings,\n  CandyGuardsRemainingAccount,\n  CandyGuardsRouteSettings,\n  CandyGuardsSettings,\n  DefaultCandyGuardRouteSettings,\n  DefaultCandyGuardSettings,\n} from './guards';\nimport { CandyGuard } from './models';\nimport { CandyGuardProgram } from './programs';\nimport { Option, padEmptyChars, removeEmptyChars } from '@/utils';\nimport {\n  deserialize,\n  deserializeFeatureFlags,\n  Program,\n  PublicKey,\n  serialize,\n  Signer,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/**\n * This client enables us to register custom guards from\n * custom Candy Guard programs and interact with them.\n *\n * @see {@link CandyGuardClient}\n * @group Module\n */\nexport class CandyMachineGuardsClient {\n  readonly guards: CandyGuardManifest<any, any, any>[] = [];\n\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Registers one or many guards by providing their manifest. */\n  register(...guard: CandyGuardManifest<any, any, any>[]) {\n    this.guards.push(...guard);\n  }\n\n  /** Gets the manifest of a guard using its name. */\n  get(name: string): CandyGuardManifest<any, any, any> {\n    const guard = this.guards.find((guard) => guard.name === name);\n\n    if (!guard) {\n      throw new UnregisteredCandyGuardError(name);\n    }\n\n    return guard;\n  }\n\n  /** Gets all registered guard manifests. */\n  all(): CandyGuardManifest<any, any, any>[] {\n    return this.guards;\n  }\n\n  /**\n   * Gets all guard manifests for a registered Candy Guard program.\n   *\n   * It fails if the manifest of any guard expected by the program\n   * is not registered. Manifests are returned in the order in which\n   * they are defined on the `availableGuards` property of the program.\n   */\n  forProgram(\n    program: string | PublicKey | CandyGuardProgram = 'CandyGuardProgram'\n  ): CandyGuardManifest<any, any, any>[] {\n    const candyGuardProgram =\n      typeof program === 'object' && 'availableGuards' in program\n        ? program\n        : this.metaplex.programs().get<CandyGuardProgram>(program);\n\n    return candyGuardProgram.availableGuards.map((name) => this.get(name));\n  }\n\n  /**\n   * Gets all guard manifests for the registered Candy Guard program.\n   *\n   * @see {@link CandyMachineGuardsClient.forProgram}\n   */\n  forCandyGuardProgram(\n    programs: Program[] = []\n  ): CandyGuardManifest<any, any, any>[] {\n    const candyGuardProgram = this.metaplex.programs().getCandyGuard(programs);\n\n    return this.forProgram(candyGuardProgram);\n  }\n\n  /** Serializes the settings of all guards and groups. */\n  serializeSettings<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n    guards: Partial<T>,\n    groups: { label: string; guards: Partial<T> }[] = [],\n    programs: Program[] = []\n  ): Buffer {\n    const availableGuards = this.forCandyGuardProgram(programs);\n    const serializeSet = (set: Partial<T>): Buffer => {\n      return availableGuards.reduce((acc, guard) => {\n        const value = set[guard.name] ?? null;\n        const optionPrefix = Buffer.from([value ? 1 : 0]);\n        const newBuffer = value\n          ? serialize(value, guard.settingsSerializer)\n          : Buffer.from([]);\n        acc = Buffer.concat([acc, optionPrefix, newBuffer]);\n        return acc;\n      }, Buffer.from([]));\n    };\n\n    let buffer = serializeSet(guards);\n\n    if (groups.length > 0) {\n      const groupCountBuffer = Buffer.alloc(5);\n      beet.u8.write(groupCountBuffer, 0, 1);\n      beet.u32.write(groupCountBuffer, 1, groups.length);\n      buffer = Buffer.concat([buffer, groupCountBuffer]);\n    } else {\n      buffer = Buffer.concat([buffer, Buffer.from([0])]);\n    }\n\n    groups.forEach((group) => {\n      const labelBuffer = Buffer.alloc(4 + CANDY_GUARD_LABEL_SIZE);\n      beet\n        .fixedSizeUtf8String(CANDY_GUARD_LABEL_SIZE)\n        .write(\n          labelBuffer,\n          0,\n          padEmptyChars(group.label, CANDY_GUARD_LABEL_SIZE)\n        );\n      buffer = Buffer.concat([buffer, labelBuffer, serializeSet(group.guards)]);\n    });\n\n    return buffer;\n  }\n\n  /** Deserializes the settings of all guards and groups. */\n  deserializeSettings<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(\n    buffer: Buffer,\n    program: string | PublicKey | CandyGuardProgram = 'CandyGuardProgram'\n  ): { guards: T; groups: { label: string; guards: T }[] } {\n    const availableGuards = this.forProgram(program);\n    const deserializeSet = () => {\n      const serializedFeatures = buffer.slice(0, 8);\n      const features = deserializeFeatureFlags(serializedFeatures, 64)[0];\n      buffer = buffer.slice(8);\n\n      return availableGuards.reduce((acc, guard, index) => {\n        const isEnabled = features[index] ?? false;\n        acc[guard.name] = null;\n        if (!isEnabled) return acc;\n\n        const [settings] = deserialize(buffer, guard.settingsSerializer);\n        buffer = buffer.slice(guard.settingsBytes);\n        acc[guard.name] = settings;\n        return acc;\n      }, {} as CandyGuardsSettings) as T;\n    };\n\n    const guards: T = deserializeSet();\n    const groups: { label: string; guards: T }[] = [];\n    const groupsCount = beet.u32.read(buffer, 0);\n    buffer = buffer.slice(4);\n\n    for (let i = 0; i < groupsCount; i++) {\n      const label = removeEmptyChars(\n        buffer.slice(0, CANDY_GUARD_LABEL_SIZE).toString('utf8')\n      );\n      buffer = buffer.slice(CANDY_GUARD_LABEL_SIZE);\n      groups.push({ label, guards: deserializeSet() });\n    }\n\n    return { guards, groups };\n  }\n\n  /**\n   * Resolves the set of settings that should be used when minting.\n   *\n   * If no group exists, the `guards` settings will be used.\n   * Otherwise, the `guards` settings will act as default settings and\n   * the settings of the selected group will override them.\n   */\n  resolveGroupSettings<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(\n    guards: T,\n    groups: { label: string; guards: T }[] = [],\n    groupLabel: Option<string>\n  ): T {\n    const availableGroups = groups.map((group) => group.label);\n    const activeGroup = groups.find((group) => group.label === groupLabel);\n    if (groupLabel && !activeGroup) {\n      throw new SelectedGuardGroupDoesNotExistError(\n        groupLabel,\n        availableGroups\n      );\n    }\n\n    if (groups.length === 0) {\n      return guards;\n    }\n\n    if (!activeGroup) {\n      throw new GuardGroupRequiredError(availableGroups);\n    }\n\n    const activeGroupGuardsWithoutNullGuards = Object.fromEntries(\n      Object.entries(activeGroup.guards).filter(([, v]) => v != null)\n    ) as Partial<T>;\n\n    return {\n      ...guards,\n      ...activeGroupGuardsWithoutNullGuards,\n    };\n  }\n\n  /**\n   * Parses the arguments and remaining accounts of\n   * all relevant guards for the mint instruction.\n   */\n  parseMintSettings<\n    Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n    MintSettings extends CandyGuardsMintSettings = {}\n  >(\n    candyMachine: PublicKey,\n    candyGuard: CandyGuard<Settings>,\n    payer: Signer,\n    guardMintSettings: Partial<MintSettings>,\n    groupLabel: Option<string>,\n    programs: Program[] = []\n  ): {\n    arguments: Buffer;\n    accountMetas: AccountMeta[];\n    signers: Signer[];\n  } {\n    const availableGuards = this.forCandyGuardProgram(programs);\n    const guardSettings = this.resolveGroupSettings(\n      candyGuard.guards,\n      candyGuard.groups,\n      groupLabel\n    );\n    const initialAccumulator = {\n      arguments: Buffer.from([]),\n      accountMetas: [] as AccountMeta[],\n      signers: [] as Signer[],\n    };\n\n    return availableGuards.reduce((acc, guard) => {\n      const settings = guardSettings[guard.name] ?? null;\n      const mintSettings = guardMintSettings[guard.name] ?? null;\n      if (!guard.mintSettingsParser || !settings) return acc;\n\n      const parsedSettings = guard.mintSettingsParser({\n        metaplex: this.metaplex,\n        settings,\n        mintSettings,\n        payer,\n        candyMachine,\n        candyGuard: candyGuard.address,\n        programs,\n      });\n\n      const accounts = this.getAccountMetas(parsedSettings.remainingAccounts);\n      const signers = this.getSigners(parsedSettings.remainingAccounts);\n      acc.arguments = Buffer.concat([acc.arguments, parsedSettings.arguments]);\n      acc.accountMetas.push(...accounts);\n      acc.signers.push(...signers);\n      return acc;\n    }, initialAccumulator);\n  }\n\n  /**\n   * Parses the arguments and remaining accounts of\n   * the requested guard for the route instruction.\n   */\n  parseRouteSettings<\n    Guard extends keyof RouteSettings & string,\n    Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n    RouteSettings extends CandyGuardsRouteSettings = DefaultCandyGuardRouteSettings\n  >(\n    candyMachine: PublicKey,\n    candyGuard: CandyGuard<Settings>,\n    payer: Signer,\n    guard: Guard,\n    routeSettings: RouteSettings[Guard],\n    groupLabel: Option<string>,\n    programs: Program[] = []\n  ): {\n    arguments: Buffer;\n    accountMetas: AccountMeta[];\n    signers: Signer[];\n  } {\n    const guardManifest = this.get(guard);\n    if (!guardManifest.routeSettingsParser) {\n      throw new GuardRouteNotSupportedError(guard);\n    }\n\n    const guardSettings = this.resolveGroupSettings(\n      candyGuard.guards,\n      candyGuard.groups,\n      groupLabel\n    );\n    const settings = guardSettings[guard] ?? null;\n    if (!settings) {\n      throw new GuardNotEnabledError(guard, groupLabel);\n    }\n\n    const parsedSettings = guardManifest.routeSettingsParser({\n      metaplex: this.metaplex,\n      settings,\n      routeSettings,\n      payer,\n      candyMachine,\n      candyGuard: candyGuard.address,\n      programs,\n    });\n\n    return {\n      arguments: parsedSettings.arguments,\n      accountMetas: this.getAccountMetas(parsedSettings.remainingAccounts),\n      signers: this.getSigners(parsedSettings.remainingAccounts),\n    };\n  }\n\n  /** @internal */\n  protected getAccountMetas(\n    remainingAccounts: CandyGuardsRemainingAccount[]\n  ): AccountMeta[] {\n    return remainingAccounts.map((account) => ({\n      pubkey: account.isSigner ? account.address.publicKey : account.address,\n      isSigner: account.isSigner,\n      isWritable: account.isWritable,\n    }));\n  }\n\n  /** @internal */\n  protected getSigners(\n    remainingAccounts: CandyGuardsRemainingAccount[]\n  ): Signer[] {\n    return remainingAccounts\n      .filter((account) => account.isSigner)\n      .map((account) => account.address as Signer);\n  }\n}\n"],"names":["CandyMachineGuardsClient","constructor","metaplex","register","guard","guards","push","get","name","find","UnregisteredCandyGuardError","all","forProgram","program","candyGuardProgram","programs","availableGuards","map","forCandyGuardProgram","getCandyGuard","serializeSettings","groups","serializeSet","set","reduce","acc","value","optionPrefix","Buffer","from","newBuffer","serialize","settingsSerializer","concat","buffer","length","groupCountBuffer","alloc","beet","u8","write","u32","forEach","group","labelBuffer","CANDY_GUARD_LABEL_SIZE","fixedSizeUtf8String","padEmptyChars","label","deserializeSettings","deserializeSet","serializedFeatures","slice","features","deserializeFeatureFlags","index","isEnabled","settings","deserialize","settingsBytes","groupsCount","read","i","removeEmptyChars","toString","resolveGroupSettings","groupLabel","availableGroups","activeGroup","SelectedGuardGroupDoesNotExistError","GuardGroupRequiredError","activeGroupGuardsWithoutNullGuards","Object","fromEntries","entries","filter","v","parseMintSettings","candyMachine","candyGuard","payer","guardMintSettings","guardSettings","initialAccumulator","arguments","accountMetas","signers","mintSettings","mintSettingsParser","parsedSettings","address","accounts","getAccountMetas","remainingAccounts","getSigners","parseRouteSettings","routeSettings","guardManifest","routeSettingsParser","GuardRouteNotSupportedError","GuardNotEnabledError","account","pubkey","isSigner","publicKey","isWritable"],"mappings":"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"}