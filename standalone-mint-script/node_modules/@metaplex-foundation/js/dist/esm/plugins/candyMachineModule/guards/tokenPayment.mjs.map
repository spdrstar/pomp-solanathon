{"version":3,"file":"tokenPayment.mjs","sources":["../../../../../src/plugins/candyMachineModule/guards/tokenPayment.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport {\n  TokenPayment,\n  tokenPaymentBeet,\n} from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport {\n  createSerializerFromBeet,\n  mapSerializer,\n  PublicKey,\n  SplTokenAmount,\n  token,\n} from '@/types';\n\n/**\n * The tokenPayment guard allows minting by charging the\n * payer a specific amount of tokens from a certain mint acount.\n * The tokens will be transfered to a predefined destination.\n *\n * This guard alone does not limit how many times a holder\n * can mint. A holder can mint as many times as they have\n * the required amount of tokens to pay with.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type TokenPaymentGuardSettings = {\n  /** The mint address of the required tokens. */\n  tokenMint: PublicKey;\n\n  /** The amount of tokens required to mint an NFT. */\n  amount: SplTokenAmount;\n\n  /** The associated token address to send the tokens to. */\n  destinationAta: PublicKey;\n};\n\n/** @internal */\nexport const tokenPaymentGuardManifest: CandyGuardManifest<TokenPaymentGuardSettings> =\n  {\n    name: 'tokenPayment',\n    settingsBytes: 72,\n    settingsSerializer: mapSerializer<TokenPayment, TokenPaymentGuardSettings>(\n      createSerializerFromBeet(tokenPaymentBeet),\n      (settings) => ({ ...settings, amount: token(settings.amount) }),\n      (settings) => ({ ...settings, amount: settings.amount.basisPoints })\n    ),\n    mintSettingsParser: ({ metaplex, settings, payer, programs }) => {\n      const tokenAddress = metaplex.tokens().pdas().associatedTokenAccount({\n        mint: settings.tokenMint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n      return {\n        arguments: Buffer.from([]),\n        remainingAccounts: [\n          {\n            isSigner: false,\n            address: tokenAddress,\n            isWritable: true,\n          },\n          {\n            isSigner: false,\n            address: settings.destinationAta,\n            isWritable: true,\n          },\n        ],\n      };\n    },\n  };\n"],"names":["tokenPaymentGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","tokenPaymentBeet","settings","amount","token","basisPoints","mintSettingsParser","metaplex","payer","programs","tokenAddress","tokens","pdas","associatedTokenAccount","mint","tokenMint","owner","publicKey","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable","destinationAta"],"mappings":";;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACO,MAAMA,yBAAwE,GACnF;AACEC,EAAAA,IAAI,EAAE,cADR;AAEEC,EAAAA,aAAa,EAAE,EAFjB;AAGEC,EAAAA,kBAAkB,EAAEC,aAAa,CAC/BC,wBAAwB,CAACC,gBAAD,CADO,EAE9BC,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeC,IAAAA,MAAM,EAAEC,KAAK,CAACF,QAAQ,CAACC,MAAV,CAAA;AAA5B,GAAf,CAF+B,EAG9BD,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeC,IAAAA,MAAM,EAAED,QAAQ,CAACC,MAAT,CAAgBE,WAAAA;AAAvC,GAAf,CAH+B,CAHnC;AAQEC,EAAAA,kBAAkB,EAAE,CAAC;IAAEC,QAAF;IAAYL,QAAZ;IAAsBM,KAAtB;AAA6BC,IAAAA,QAAAA;AAA7B,GAAD,KAA6C;IAC/D,MAAMC,YAAY,GAAGH,QAAQ,CAACI,MAAT,EAAkBC,CAAAA,IAAlB,EAAyBC,CAAAA,sBAAzB,CAAgD;MACnEC,IAAI,EAAEZ,QAAQ,CAACa,SADoD;MAEnEC,KAAK,EAAER,KAAK,CAACS,SAFsD;AAGnER,MAAAA,QAAAA;AAHmE,KAAhD,CAArB,CAAA;IAMA,OAAO;AACLS,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAP,CAAY,EAAZ,CADN;AAELC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAEb,YAFX;AAGEc,QAAAA,UAAU,EAAE,IAAA;AAHd,OADiB,EAMjB;AACEF,QAAAA,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAErB,QAAQ,CAACuB,cAFpB;AAGED,QAAAA,UAAU,EAAE,IAAA;OATG,CAAA;KAFrB,CAAA;AAeD,GAAA;AA9BH;;;;"}