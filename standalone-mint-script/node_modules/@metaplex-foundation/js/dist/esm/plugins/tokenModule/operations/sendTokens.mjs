import { createTransferInstruction } from '@solana/spl-token';
import { useOperation } from '../../../types/Operation.mjs';
import { toPublicKey } from '../../../types/PublicKey.mjs';
import { isSigner } from '../../../types/Signer.mjs';
import { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';

// Operation
// -----------------

const Key = 'SendTokensOperation';
/**
 * Send tokens from one account to another.
 *
 * ```ts
 * await metaplex
 *   .tokens()
 *   .send({
 *     mintAddress,
 *     toOwner,
 *     amount: token(100),
 *   };
 * ```
 *
 * @group Operations
 * @category Constructors
 */

const sendTokensOperation = useOperation(Key);
/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const sendTokensOperationHandler = {
  async handle(operation, metaplex, scope) {
    const {
      mintAddress,
      toOwner = metaplex.identity().publicKey,
      toToken
    } = operation.input;
    const destination = toToken !== null && toToken !== void 0 ? toToken : metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintAddress,
      owner: toOwner,
      programs: scope.programs
    });
    const destinationAddress = toPublicKey(destination);
    const destinationAccountExists = await metaplex.rpc().accountExists(destinationAddress);
    scope.throwIfCanceled();
    const builder = await sendTokensBuilder(metaplex, { ...operation.input,
      toTokenExists: destinationAccountExists
    }, scope);
    scope.throwIfCanceled();
    return builder.sendAndConfirm(metaplex, scope.confirmOptions);
  }

}; // -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Send tokens from one account to another.
 *
 * ```ts
 * const transactionBuilder = await metaplex
 *   .tokens()
 *   .builders()
 *   .send({
 *     mintAddress,
 *     toOwner,
 *     amount: token(100),
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const sendTokensBuilder = async (metaplex, params, options = {}) => {
  var _params$transferToken;

  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    amount,
    toOwner = metaplex.identity().publicKey,
    toToken,
    toTokenExists = true,
    fromOwner = metaplex.identity(),
    fromToken,
    fromMultiSigners = [],
    delegateAuthority
  } = params;
  const [fromOwnerPublicKey, signers] = isSigner(fromOwner) ? [fromOwner.publicKey, [fromOwner]] : [fromOwner, [delegateAuthority, ...fromMultiSigners].filter(isSigner)];
  const tokenProgram = metaplex.programs().getToken(programs);
  const source = fromToken !== null && fromToken !== void 0 ? fromToken : metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: fromOwnerPublicKey,
    programs
  });
  const destination = toToken !== null && toToken !== void 0 ? toToken : metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner: toOwner,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer) // Create token account if missing.
  .add(await metaplex.tokens().builders().createTokenIfMissing({ ...params,
    mint: mintAddress,
    owner: toOwner,
    token: toToken,
    tokenExists: toTokenExists,
    tokenVariable: 'toToken'
  }, {
    programs,
    payer
  })) // Transfer tokens.
  .add({
    instruction: createTransferInstruction(source, toPublicKey(destination), delegateAuthority ? delegateAuthority.publicKey : fromOwnerPublicKey, amount.basisPoints.toNumber(), fromMultiSigners, tokenProgram.address),
    signers,
    key: (_params$transferToken = params.transferTokensInstructionKey) !== null && _params$transferToken !== void 0 ? _params$transferToken : 'transferTokens'
  });
};

export { sendTokensBuilder, sendTokensOperation, sendTokensOperationHandler };
//# sourceMappingURL=sendTokens.mjs.map
