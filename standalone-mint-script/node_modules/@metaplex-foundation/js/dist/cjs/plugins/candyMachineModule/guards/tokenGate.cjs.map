{"version":3,"file":"tokenGate.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/tokenGate.ts"],"sourcesContent":["import { TokenGate, tokenGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport {\n  createSerializerFromBeet,\n  mapSerializer,\n  PublicKey,\n  SplTokenAmount,\n  token,\n} from '@/types';\n\n/**\n * The tokenGate guard restricts minting to token holders\n * of a specified mint account. The `amount` determines\n * how many tokens are required.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link TokenGateGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\nexport type TokenGateGuardSettings = {\n  /** The mint address of the required tokens. */\n  mint: PublicKey;\n\n  /** The amount of tokens required to mint an NFT. */\n  amount: SplTokenAmount;\n};\n\n/**\n * The settings for the tokenGate guard that could\n * be provided when minting from the Candy Machine.\n *\n * @see {@link TokenGateGuardSettings} for more\n * information on the tokenGate guard itself.\n */\nexport type TokenGateGuardMintSettings = {\n  /**\n   * The token account linking the mint\n   * account with the token holder.\n   *\n   * @defaultValue\n   * Defaults to the associated token address using the\n   * mint address and the payer's address.\n   */\n  tokenAccount?: PublicKey;\n};\n\n/** @internal */\nexport const tokenGateGuardManifest: CandyGuardManifest<\n  TokenGateGuardSettings,\n  TokenGateGuardMintSettings\n> = {\n  name: 'tokenGate',\n  settingsBytes: 40,\n  settingsSerializer: mapSerializer<TokenGate, TokenGateGuardSettings>(\n    createSerializerFromBeet(tokenGateBeet),\n    (settings) => ({ ...settings, amount: token(settings.amount) }),\n    (settings) => ({ ...settings, amount: settings.amount.basisPoints })\n  ),\n  mintSettingsParser: ({\n    metaplex,\n    settings,\n    mintSettings,\n    payer,\n    programs,\n  }) => {\n    const tokenAccount =\n      mintSettings?.tokenAccount ??\n      metaplex.tokens().pdas().associatedTokenAccount({\n        mint: settings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: tokenAccount,\n          isWritable: false,\n        },\n      ],\n    };\n  },\n};\n"],"names":["tokenGateGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","tokenGateBeet","settings","amount","token","basisPoints","mintSettingsParser","metaplex","mintSettings","payer","programs","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA4BA;AACO,MAAMA,sBAGZ,GAAG;AACFC,EAAAA,IAAI,EAAE,WADJ;AAEFC,EAAAA,aAAa,EAAE,EAFb;AAGFC,EAAAA,kBAAkB,EAAEC,wBAAa,CAC/BC,mCAAwB,CAACC,2BAAD,CADO,EAE9BC,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeC,IAAAA,MAAM,EAAEC,YAAK,CAACF,QAAQ,CAACC,MAAV,CAAA;AAA5B,GAAf,CAF+B,EAG9BD,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeC,IAAAA,MAAM,EAAED,QAAQ,CAACC,MAAT,CAAgBE,WAAAA;AAAvC,GAAf,CAH+B,CAH/B;AAQFC,EAAAA,kBAAkB,EAAE,CAAC;IACnBC,QADmB;IAEnBL,QAFmB;IAGnBM,YAHmB;IAInBC,KAJmB;AAKnBC,IAAAA,QAAAA;AALmB,GAAD,KAMd;AAAA,IAAA,IAAA,qBAAA,CAAA;;AACJ,IAAA,MAAMC,YAAY,GAChBH,CAAAA,qBAAAA,GAAAA,YADgB,KAChBA,IAAAA,IAAAA,YADgB,uBAChBA,YAAY,CAAEG,YADE,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAEhBJ,QAAQ,CAACK,MAAT,GAAkBC,IAAlB,EAAA,CAAyBC,sBAAzB,CAAgD;MAC9CC,IAAI,EAAEb,QAAQ,CAACa,IAD+B;MAE9CC,KAAK,EAAEP,KAAK,CAACQ,SAFiC;AAG9CP,MAAAA,QAAAA;AAH8C,KAAhD,CAFF,CAAA;IAQA,OAAO;AACLQ,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAP,CAAY,EAAZ,CADN;AAELC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAEZ,YAFX;AAGEa,QAAAA,UAAU,EAAE,KAAA;OAJG,CAAA;KAFrB,CAAA;AAUD,GAAA;AAjCC;;;;"}