{"version":3,"file":"updateNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/updateNft.ts"],"sourcesContent":["import {\n  createUpdateMetadataAccountV2Instruction,\n  UpdateMetadataAccountArgsV2,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport isEqual from 'lodash.isequal';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Sft } from '../models';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  CreatorInput,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { NoInstructionsToSendError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateNftOperation' as const;\n\n/**\n * Updates an existing NFT or SFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .update({ nftOrSft, name: \"My new NFT name\" };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateNftOperation = useOperation<UpdateNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateNftOperation = Operation<\n  typeof Key,\n  UpdateNftInput,\n  UpdateNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateNftInput = {\n  /**\n   * The NFT or SFT to update.\n   * We only need a subset of the `Sft` (or `Nft`) model to figure out\n   * the current values for the data of the metadata account and only update\n   * the parts that are different.\n   */\n  nftOrSft: Pick<\n    Sft,\n    | 'address'\n    | 'collection'\n    | 'creators'\n    | 'name'\n    | 'symbol'\n    | 'uri'\n    | 'sellerFeeBasisPoints'\n    | 'uses'\n  >;\n\n  /**\n   * The current update authority of the asset as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  updateAuthority?: Signer;\n\n  /**\n   * The address of the new update authority to set for the asset\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newUpdateAuthority?: PublicKey;\n\n  /**\n   * The new on-chain name of the asset.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  name?: string;\n\n  /**\n   * The new on-chain symbol of the asset.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  symbol?: string;\n\n  /**\n   * The new on-chain uri of the asset.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  uri?: string;\n\n  /**\n   * The new royalties of the asset in percent basis point\n   * (i.e. 250 is 2.5%) that should be paid to the creators\n   * on each secondary sale.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  sellerFeeBasisPoints?: number;\n\n  /**\n   * The new creators for the asset.\n   * For each creator, if an `authority` Signer is provided,\n   * the creator will be marked as verified.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  creators?: CreatorInput[];\n\n  /**\n   * Whether or not the asset has already been sold to its first buyer.\n   * This can only be flipped from `false` to `true`.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  primarySaleHappened?: boolean;\n\n  /**\n   * Whether or not the asset is mutable.\n   * When set to `false` no one can update the Metadata account,\n   * not even the update authority.\n   * This can only be flipped from `true` to `false`.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  isMutable?: boolean;\n\n  /**\n   * When this field is not `null`, it indicates that the asset\n   * can be \"used\" by its owner or any approved \"use authorities\".\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  uses?: Option<Uses>;\n\n  /**\n   * The new Collection NFT that this asset belongs to.\n   * When `null`, this will remove the asset from its current collection.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  collection?: Option<PublicKey>;\n\n  /**\n   * The collection authority that should sign the asset\n   * to prove that it is part of the newly provided collection.\n   * When `null`, the provided `collection` will not be verified.\n   *\n   * @defaultValue `null`\n   */\n  collectionAuthority?: Option<Signer>;\n\n  /**\n   * Whether or not the provided `collectionAuthority` is a delegated\n   * collection authority, i.e. it was approved by the update authority\n   * using `metaplex.nfts().approveCollectionAuthority()`.\n   *\n   * @defaultValue `false`\n   */\n  collectionAuthorityIsDelegated?: boolean;\n\n  /**\n   * Whether or not the newly provided `collection` is a sized collection\n   * and not a legacy collection.\n   *\n   * @defaultValue `true`\n   */\n  collectionIsSized?: boolean;\n\n  /**\n   * Whether or not the current asset's collection is a sized collection\n   * and not a legacy collection.\n   *\n   * @defaultValue `true`\n   */\n  oldCollectionIsSized?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateNftOperationHandler: OperationHandler<UpdateNftOperation> = {\n  handle: async (\n    operation: UpdateNftOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<UpdateNftOutput> => {\n    const builder = updateNftBuilder(metaplex, operation.input, scope);\n\n    if (builder.isEmpty()) {\n      throw new NoInstructionsToSendError(Key);\n    }\n\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateNftBuilderParams = Omit<UpdateNftInput, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that updates the metadata account. */\n  updateMetadataInstructionKey?: string;\n};\n\n/**\n * Updates an existing NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .update({ nftOrSft, name: \"My new NFT name\" });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateNftBuilder = (\n  metaplex: Metaplex,\n  params: UpdateNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { nftOrSft, updateAuthority = metaplex.identity() } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const updateInstructionDataWithoutChanges = toInstructionData(nftOrSft);\n  const updateInstructionData = toInstructionData(nftOrSft, params);\n  const shouldSendUpdateInstruction = !isEqual(\n    updateInstructionData,\n    updateInstructionDataWithoutChanges\n  );\n\n  const isRemovingVerifiedCollection =\n    !!nftOrSft.collection &&\n    !!nftOrSft.collection.verified &&\n    params.collection === null;\n  const isOverridingVerifiedCollection =\n    !!nftOrSft.collection &&\n    !!nftOrSft.collection.verified &&\n    !!params.collection &&\n    !params.collection.equals(nftOrSft.collection.address);\n  const shouldUnverifyCurrentCollection =\n    isRemovingVerifiedCollection || isOverridingVerifiedCollection;\n\n  const creatorsInput: CreatorInput[] = params.creators ?? nftOrSft.creators;\n  const verifyAdditionalCreatorInstructions = creatorsInput\n    .filter((creator) => {\n      const currentCreator = nftOrSft.creators.find(({ address }) =>\n        address.equals(creator.address)\n      );\n      const currentlyVerified = currentCreator?.verified ?? false;\n      return !!creator.authority && !currentlyVerified;\n    })\n    .map((creator) => {\n      return metaplex.nfts().builders().verifyCreator(\n        {\n          mintAddress: nftOrSft.address,\n          creator: creator.authority,\n        },\n        { payer, programs }\n      );\n    });\n\n  return (\n    TransactionBuilder.make()\n\n      // Unverify current collection before overriding it.\n      // Otherwise, the previous collection size will not be properly decremented.\n      .when(shouldUnverifyCurrentCollection, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .unverifyCollection(\n              {\n                mintAddress: nftOrSft.address,\n                collectionMintAddress: nftOrSft.collection\n                  ?.address as PublicKey,\n                collectionAuthority: updateAuthority,\n                isSizedCollection: params.oldCollectionIsSized ?? true,\n              },\n              { programs, payer }\n            )\n        )\n      )\n\n      // Update the metadata account.\n      .when(shouldSendUpdateInstruction, (builder) =>\n        builder.add({\n          instruction: createUpdateMetadataAccountV2Instruction(\n            {\n              metadata: metaplex.nfts().pdas().metadata({\n                mint: nftOrSft.address,\n                programs,\n              }),\n              updateAuthority: updateAuthority.publicKey,\n            },\n            { updateMetadataAccountArgsV2: updateInstructionData },\n            tokenMetadataProgram.address\n          ),\n          signers: [updateAuthority],\n          key: params.updateMetadataInstructionKey ?? 'updateMetadata',\n        })\n      )\n\n      // Verify additional creators.\n      .add(...verifyAdditionalCreatorInstructions)\n\n      // Verify collection.\n      .when(!!params.collection && !!params.collectionAuthority, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .verifyCollection(\n              {\n                mintAddress: nftOrSft.address,\n                collectionMintAddress: params.collection as PublicKey,\n                collectionAuthority: params.collectionAuthority as Signer,\n                isDelegated: params.collectionAuthorityIsDelegated ?? false,\n                isSizedCollection: params.collectionIsSized ?? true,\n              },\n              { programs, payer }\n            )\n        )\n      )\n  );\n};\n\nconst toInstructionData = (\n  nftOrSft: Pick<\n    Sft,\n    | 'address'\n    | 'collection'\n    | 'creators'\n    | 'name'\n    | 'symbol'\n    | 'uri'\n    | 'sellerFeeBasisPoints'\n    | 'uses'\n  >,\n  input: Partial<UpdateNftInput> = {}\n): UpdateMetadataAccountArgsV2 => {\n  const creators =\n    input.creators === undefined\n      ? nftOrSft.creators\n      : input.creators.map((creator) => {\n          const currentCreator = nftOrSft.creators.find(({ address }) =>\n            address.equals(creator.address)\n          );\n          return {\n            ...creator,\n            verified: currentCreator?.verified ?? false,\n          };\n        });\n\n  const currentCollection = nftOrSft.collection\n    ? { ...nftOrSft.collection, key: nftOrSft.collection.address }\n    : null;\n  const newCollection = input.collection\n    ? { key: input.collection, verified: false }\n    : null;\n\n  return {\n    updateAuthority: input.newUpdateAuthority ?? null,\n    primarySaleHappened: input.primarySaleHappened ?? null,\n    isMutable: input.isMutable ?? null,\n    data: {\n      name: input.name ?? nftOrSft.name,\n      symbol: input.symbol ?? nftOrSft.symbol,\n      uri: input.uri ?? nftOrSft.uri,\n      sellerFeeBasisPoints:\n        input.sellerFeeBasisPoints ?? nftOrSft.sellerFeeBasisPoints,\n      creators: creators.length > 0 ? creators : null,\n      uses: input.uses === undefined ? nftOrSft.uses : input.uses,\n      collection:\n        input.collection === undefined ? currentCollection : newCollection,\n    },\n  };\n};\n"],"names":["Key","updateNftOperation","useOperation","updateNftOperationHandler","handle","operation","metaplex","scope","builder","updateNftBuilder","input","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","nftOrSft","updateAuthority","identity","tokenMetadataProgram","getTokenMetadata","updateInstructionDataWithoutChanges","toInstructionData","updateInstructionData","shouldSendUpdateInstruction","isEqual","isRemovingVerifiedCollection","collection","verified","isOverridingVerifiedCollection","equals","address","shouldUnverifyCurrentCollection","creatorsInput","creators","verifyAdditionalCreatorInstructions","filter","creator","currentCreator","find","currentlyVerified","authority","map","nfts","builders","verifyCreator","mintAddress","TransactionBuilder","make","when","add","unverifyCollection","collectionMintAddress","collectionAuthority","isSizedCollection","oldCollectionIsSized","instruction","createUpdateMetadataAccountV2Instruction","metadata","pdas","mint","publicKey","updateMetadataAccountArgsV2","signers","key","updateMetadataInstructionKey","verifyCollection","isDelegated","collectionAuthorityIsDelegated","collectionIsSized","undefined","currentCollection","newCollection","newUpdateAuthority","primarySaleHappened","isMutable","data","name","symbol","uri","sellerFeeBasisPoints","length","uses"],"mappings":"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"}