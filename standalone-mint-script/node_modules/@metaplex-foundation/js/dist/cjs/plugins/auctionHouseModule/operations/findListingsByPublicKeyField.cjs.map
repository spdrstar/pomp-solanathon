{"version":3,"file":"findListingsByPublicKeyField.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findListingsByPublicKeyField.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toListingReceiptAccount } from '../accounts';\nimport { ListingReceiptGpaBuilder } from '../gpaBuilders';\nimport { AuctionHouse, LazyListing, Listing, toLazyListing } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { UnreachableCaseError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindListingsByPublicKeyOperation' as const;\n\n/**\n * Finds multiple Listings by specific criteria.\n *\n * ```ts\n * // Find listings by seller.\n * const listings = await metaplex\n *   .auctionHouse()\n *   .findListingsBy({ auctionHouse, type: 'seller', publicKey: seller };\n *\n * // Find listings by metadata.\n * const listings = await metaplex\n *   .auctionHouse()\n *   .findListingsBy({ auctionHouse, type: 'metadata', publicKey: metadata };\n *\n * // Find listings by mint.\n * const listings = await metaplex\n *   .auctionHouse()\n *   .findListingsBy({ auctionHouse, type: 'mint', publicKey: mint };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findListingsByPublicKeyFieldOperation =\n  useOperation<FindListingsByPublicKeyFieldOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindListingsByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindListingsByPublicKeyFieldInput,\n  FindListingsByPublicKeyFieldOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindListingsByPublicKeyFieldInput = {\n  /** A type of criteria to use in search. */\n  type: 'seller' | 'metadata' | 'mint';\n\n  /** A model of the Auction House related to these listings. */\n  auctionHouse: AuctionHouse;\n\n  /** The address to search for. */\n  publicKey: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindListingsByPublicKeyFieldOutput = (Listing | LazyListing)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findListingsByPublicKeyFieldOperationHandler: OperationHandler<FindListingsByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindListingsByPublicKeyFieldOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindListingsByPublicKeyFieldOutput> => {\n      const { commitment, programs } = scope;\n      const { auctionHouse, type, publicKey } = operation.input;\n      const auctionHouseProgram = metaplex.programs().getAuctionHouse();\n      let listingQuery = new ListingReceiptGpaBuilder(\n        metaplex,\n        auctionHouseProgram.address\n      )\n        .mergeConfig({ commitment })\n        .whereAuctionHouse(auctionHouse.address);\n\n      switch (type) {\n        case 'seller':\n          listingQuery = listingQuery.whereSeller(publicKey);\n          break;\n        case 'metadata':\n          listingQuery = listingQuery.whereMetadata(publicKey);\n          break;\n        case 'mint':\n          listingQuery = listingQuery.whereMetadata(\n            metaplex.nfts().pdas().metadata({ mint: publicKey, programs })\n          );\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n      scope.throwIfCanceled();\n\n      return listingQuery.getAndMap((account) =>\n        toLazyListing(toListingReceiptAccount(account), auctionHouse)\n      );\n    },\n  };\n"],"names":["Key","findListingsByPublicKeyFieldOperation","useOperation","findListingsByPublicKeyFieldOperationHandler","handle","operation","metaplex","scope","commitment","programs","auctionHouse","type","publicKey","input","auctionHouseProgram","getAuctionHouse","listingQuery","ListingReceiptGpaBuilder","address","mergeConfig","whereAuctionHouse","whereSeller","whereMetadata","nfts","pdas","metadata","mint","UnreachableCaseError","throwIfCanceled","getAndMap","account","toLazyListing","toListingReceiptAccount"],"mappings":";;;;;;;;;;AAcA;AACA;;AAEA,MAAMA,GAAG,GAAG,kCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qCAAqC,GAChDC,sBAAY,CAAwCF,GAAxC,EADP;AAGP;AACA;AACA;AACA;;AA4BA;AACA;AACA;AACA;AACO,MAAMG,4CAAqG,GAChH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI0C;IAChD,MAAM;MAAEC,UAAF;AAAcC,MAAAA,QAAAA;AAAd,KAAA,GAA2BF,KAAjC,CAAA;IACA,MAAM;MAAEG,YAAF;MAAgBC,IAAhB;AAAsBC,MAAAA,SAAAA;KAAcP,GAAAA,SAAS,CAACQ,KAApD,CAAA;AACA,IAAA,MAAMC,mBAAmB,GAAGR,QAAQ,CAACG,QAAT,EAAA,CAAoBM,eAApB,EAA5B,CAAA;AACA,IAAA,IAAIC,YAAY,GAAG,IAAIC,iDAAJ,CACjBX,QADiB,EAEjBQ,mBAAmB,CAACI,OAFH,CAIhBC,CAAAA,WAJgB,CAIJ;AAAEX,MAAAA,UAAAA;AAAF,KAJI,EAKhBY,iBALgB,CAKEV,YAAY,CAACQ,OALf,CAAnB,CAAA;;AAOA,IAAA,QAAQP,IAAR;AACE,MAAA,KAAK,QAAL;AACEK,QAAAA,YAAY,GAAGA,YAAY,CAACK,WAAb,CAAyBT,SAAzB,CAAf,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,UAAL;AACEI,QAAAA,YAAY,GAAGA,YAAY,CAACM,aAAb,CAA2BV,SAA3B,CAAf,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,MAAL;AACEI,QAAAA,YAAY,GAAGA,YAAY,CAACM,aAAb,CACbhB,QAAQ,CAACiB,IAAT,EAAgBC,CAAAA,IAAhB,EAAuBC,CAAAA,QAAvB,CAAgC;AAAEC,UAAAA,IAAI,EAAEd,SAAR;AAAmBH,UAAAA,QAAAA;AAAnB,SAAhC,CADa,CAAf,CAAA;AAGA,QAAA,MAAA;;AACF,MAAA;AACE,QAAA,MAAM,IAAIkB,6BAAJ,CAAyBhB,IAAzB,CAAN,CAAA;AAbJ,KAAA;;AAeAJ,IAAAA,KAAK,CAACqB,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOZ,YAAY,CAACa,SAAb,CAAwBC,OAAD,IAC5BC,qBAAa,CAACC,gCAAuB,CAACF,OAAD,CAAxB,EAAmCpB,YAAnC,CADR,CAAP,CAAA;AAGD,GAAA;AApCH;;;;;"}