import type { Metaplex } from '../../Metaplex';
import { ApproveTokenDelegateAuthorityInput, CreateMintInput, CreateTokenInput, CreateTokenWithMintInput, FindMintByAddressInput, FindTokenByAddressInput, FindTokenWithMintByAddressInput, FindTokenWithMintByMintInput, FreezeTokensInput, MintTokensInput, RevokeTokenDelegateAuthorityInput, SendTokensInput, ThawTokensInput } from '@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/operations';
import { TokenBuildersClient } from '@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/TokenBuildersClient';
/**
 * This is a client for the Token module.
 *
 * It enables us to interact with the SPL Token program in order to
 * create, send, freeze, thaw, and mint tokens.
 *
 * You may access this client via the `tokens()` method of your `Metaplex` instance.
 *
 * ```ts
 * const tokenClient = metaplex.tokens();
 * ```
 *
 * @example
 * You can create a new mint account with an associated token account like so.
 * The owner of this token account will, by default, be the current identity
 * of the metaplex instance.
 *
 * ```ts
 * const { token } = await metaplex.tokens().createTokenWithMint();
 * ```
 *
 * @group Modules
 */
export declare class TokenClient {
    protected readonly metaplex: Metaplex;
    constructor(metaplex: Metaplex);
    /**
     * You may use the `builders()` client to access the
     * underlying Transaction Builders of this module.
     */
    builders(): TokenBuildersClient;
    /** {@inheritDoc findMintByAddressOperation} */
    findMintByAddress(input: FindMintByAddressInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/models").Mint, []>;
    /** {@inheritDoc findTokenByAddressOperation} */
    findTokenByAddress(input: FindTokenByAddressInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/models").Token, []>;
    /** {@inheritDoc findTokenWithMintByAddressOperation} */
    findTokenWithMintByAddress(input: FindTokenWithMintByAddressInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/models").TokenWithMint, []>;
    /** {@inheritDoc findTokenWithMintByMintOperation} */
    findTokenWithMintByMint(input: FindTokenWithMintByMintInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/models").TokenWithMint, []>;
    /** {@inheritDoc createMintOperation} */
    createMint(input?: CreateMintInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/operations").CreateMintOutput, []>;
    /**
     * Create a new Token account from the provided input
     * and returns the newly created `Token` model.
     */
    /** {@inheritDoc createTokenOperation} */
    createToken(input: CreateTokenInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/operations").CreateTokenOutput, []>;
    /** {@inheritDoc createTokenWithMintOperation} */
    createTokenWithMint(input?: CreateTokenWithMintInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/operations").CreateTokenWithMintOutput, []>;
    /** {@inheritDoc mintTokensOperation} */
    mint(input: MintTokensInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/operations").MintTokensOutput, []>;
    /** {@inheritDoc sendTokensOperation} */
    send(input: SendTokensInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/operations").SendTokensOutput, []>;
    /** {@inheritDoc freezeTokensOperation} */
    freeze(input: FreezeTokensInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/operations").FreezeTokensOutput, []>;
    /** {@inheritDoc thawTokensOperation} */
    thaw(input: ThawTokensInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/operations").ThawTokensOutput, []>;
    /** {@inheritDoc approveTokenDelegateAuthorityOperation} */
    approveDelegateAuthority(input: ApproveTokenDelegateAuthorityInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/operations").ApproveTokenDelegateAuthorityOutput, []>;
    /** {@inheritDoc revokeTokenDelegateAuthorityOperation} */
    revokeDelegateAuthority(input: RevokeTokenDelegateAuthorityInput): import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js").Task<import("@thirdweb-dev/sdk/node_modules/@metaplex-foundation/js/dist/types/plugins/tokenModule/operations").RevokeTokenDelegateAuthorityOutput, []>;
}
