import Ar from "arweave/node/ar";
import Api, { ApiConfig } from "arweave/node/lib/api";
import CryptoInterface from "arweave/node/lib/crypto/crypto-interface";
import Network from "arweave/node/network";
import Transactions from "arweave/node/transactions";
import Wallets from "arweave/node/wallets";
import Transaction, { Tag } from "arweave/node/lib/transaction";
import { JWKInterface } from "arweave/node/lib/wallet";
import * as ArweaveUtils from "arweave/node/lib/utils";
import Silo from "arweave/node/silo";
import Chunks from "arweave/node/chunks";
import Blocks from "arweave/node/blocks";
export interface Config {
    api: ApiConfig;
    crypto: CryptoInterface;
}
export interface CreateTransactionInterface {
    format: number;
    last_tx: string;
    owner: string;
    tags: Tag[];
    target: string;
    quantity: string;
    data: string | Uint8Array | ArrayBuffer;
    data_size: string;
    data_root: string;
    reward: string;
}
export default class Arweave {
    api: Api;
    wallets: Wallets;
    transactions: Transactions;
    network: Network;
    blocks: Blocks;
    ar: Ar;
    silo: Silo;
    chunks: Chunks;
    static init: (apiConfig: ApiConfig) => Arweave;
    static crypto: CryptoInterface;
    static utils: typeof ArweaveUtils;
    constructor(apiConfig: ApiConfig);
    /** @deprecated */
    get crypto(): CryptoInterface;
    /** @deprecated */
    get utils(): typeof ArweaveUtils;
    getConfig(): Config;
    createTransaction(attributes: Partial<CreateTransactionInterface>, jwk?: JWKInterface | "use_wallet"): Promise<Transaction>;
    createSiloTransaction(attributes: Partial<CreateTransactionInterface>, jwk: JWKInterface, siloUri: string): Promise<Transaction>;
    arql(query: object): Promise<string[]>;
}
